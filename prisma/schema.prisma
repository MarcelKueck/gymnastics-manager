// This is your Prisma schema file
// Save this as: prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles enum
enum UserRole {
  ATHLETE
  TRAINER
  ADMIN
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum YouthCategory {
  F
  E
  D
}

enum DayOfWeek {
  MONDAY
  THURSDAY
  FRIDAY
}

enum RecurrenceInterval {
  WEEKLY
  BIWEEKLY
  MONTHLY
}

enum AttendanceStatus {
  PRESENT
  ABSENT_UNEXCUSED
  ABSENT_EXCUSED
}

// Upload Category - ADMIN MANAGED
model UploadCategory {
  id          String  @id @default(cuid())
  name        String  @unique // e.g., "Kraftziele", "Dehnübungen"
  description String?
  sortOrder   Int     @default(0) // For ordering categories
  isActive    Boolean @default(true)

  uploads Upload[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([isActive, sortOrder])
}

// Main Athlete model (unified account)
model Athlete {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  birthDate    DateTime
  gender       Gender
  phone        String

  // Optional guardian information
  guardianName          String?
  guardianEmail         String?
  guardianPhone         String?
  emergencyContactName  String?
  emergencyContactPhone String?

  // Coach-managed training configuration
  youthCategory            YouthCategory @default(F)
  competitionParticipation Boolean       @default(false)
  hasDtbId                 Boolean       @default(false)

  // Account status
  isApproved        Boolean   @default(false)
  approvedBy        String?
  approvedByTrainer Trainer?  @relation("AthleteApprovals", fields: [approvedBy], references: [id])
  approvedAt        DateTime?
  configuredAt      DateTime?

  // Athlete preferences
  autoConfirmFutureSessions Boolean @default(false)

  // Relationships
  groupAssignments             AthleteGroupAssignment[]
  recurringTrainingAssignments RecurringTrainingAthleteAssignment[]
  cancellations                Cancellation[]
  attendanceRecords            AttendanceRecord[]
  sessionAthleteAssignments    SessionAthleteAssignment[] // For one-time session-specific assignments

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([isApproved])
  @@index([lastName])
  @@index([birthDate]) // For age group calculations
}

// Trainer account
model Trainer {
  id           String   @id @default(cuid())
  email        String   @unique
  passwordHash String
  firstName    String
  lastName     String
  phone        String
  role         UserRole @default(TRAINER)
  isActive     Boolean  @default(true)

  // Relationships
  approvedAthletes Athlete[]          @relation("AthleteApprovals")
  uploads          Upload[]
  attendanceMarked AttendanceRecord[]
  auditLogs        AuditLog[]

  // Legacy group assignments
  legacyGroupAssignments AthleteGroupAssignment[] @relation("LegacyGroupAssignments")

  // New recurring training relationships
  createdRecurringTrainings    RecurringTraining[]                  @relation("RecurringTrainingCreator")
  recurringTrainingAssignments RecurringTrainingTrainerAssignment[] @relation("RecurringTrainingAssignments")
  recurringAthleteAssignments  RecurringTrainingAthleteAssignment[]
  trainerAssignmentsCreated    RecurringTrainingTrainerAssignment[] @relation("TrainerAssignmentCreator")

  // Session-specific assignments
  sessionGroupAssignments     SessionGroupTrainerAssignment[]
  sessionAthleteReassignments SessionAthleteAssignment[]      @relation("SessionAthleteReassignments")

  // Monthly hours summaries
  monthlyHoursSummaries         MonthlyTrainerSummary[] @relation("TrainerMonthlySummaries")
  modifiedMonthlyHoursSummaries MonthlyTrainerSummary[] @relation("TrainerSummaryModifier")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email])
  @@index([role])
}

// Recurring Training Template - ADMIN ONLY
model RecurringTraining {
  id        String    @id @default(cuid())
  name      String // e.g., "Montag - 1. Stunde"
  dayOfWeek DayOfWeek
  startTime String // e.g., "17:00"
  endTime   String // e.g., "18:30"

  recurrenceInterval RecurrenceInterval @default(WEEKLY)
  startDate          DateTime // When this template starts generating sessions
  endDate            DateTime? // Optional: when to stop generating

  isActive Boolean @default(true)

  // Relationships
  groups   TrainingGroup[] // A recurring training can have multiple named groups
  sessions TrainingSession[]

  createdBy        String
  createdByTrainer Trainer  @relation("RecurringTrainingCreator", fields: [createdBy], references: [id])
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([dayOfWeek])
  @@index([isActive])
  @@index([startDate])
}

// Training Group - Named groups within a recurring training
model TrainingGroup {
  id                  String            @id @default(cuid())
  recurringTrainingId String
  recurringTraining   RecurringTraining @relation(fields: [recurringTrainingId], references: [id], onDelete: Cascade)

  name        String // e.g., "Anfänger", "Fortgeschrittene", "Wettkampf"
  description String? // Optional description
  sortOrder   Int     @default(0) // For ordering groups within a session

  // Relationships
  athleteAssignments RecurringTrainingAthleteAssignment[]
  trainerAssignments RecurringTrainingTrainerAssignment[]
  sessionGroups      SessionGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([recurringTrainingId, name])
  @@index([recurringTrainingId])
}

// Athlete assignment to recurring training group - ADMIN/TRAINER MANAGED
model RecurringTrainingAthleteAssignment {
  id              String        @id @default(cuid())
  trainingGroupId String
  trainingGroup   TrainingGroup @relation(fields: [trainingGroupId], references: [id], onDelete: Cascade)
  athleteId       String
  athlete         Athlete       @relation(fields: [athleteId], references: [id], onDelete: Cascade)

  assignedBy        String
  assignedByTrainer Trainer  @relation(fields: [assignedBy], references: [id])
  assignedAt        DateTime @default(now())

  createdAt DateTime @default(now())

  @@unique([trainingGroupId, athleteId])
  @@index([trainingGroupId])
  @@index([athleteId])
}

// Trainer assignment to recurring training group - ADMIN ONLY
model RecurringTrainingTrainerAssignment {
  id              String        @id @default(cuid())
  trainingGroupId String
  trainingGroup   TrainingGroup @relation(fields: [trainingGroupId], references: [id], onDelete: Cascade)
  trainerId       String
  trainer         Trainer       @relation("RecurringTrainingAssignments", fields: [trainerId], references: [id], onDelete: Cascade)
  isPrimary       Boolean       @default(false) // Primary or secondary trainer

  // Optional: Override for specific sessions
  effectiveFrom  DateTime? // If set, applies from this date forward
  effectiveUntil DateTime? // If set, applies until this date

  assignedBy        String
  assignedByTrainer Trainer  @relation("TrainerAssignmentCreator", fields: [assignedBy], references: [id])
  assignedAt        DateTime @default(now())

  createdAt DateTime @default(now())

  @@unique([trainingGroupId, trainerId])
  @@index([trainingGroupId])
  @@index([trainerId])
}

// Legacy: Group Assignment (being phased out)
model AthleteGroupAssignment {
  id          String    @id @default(cuid())
  athleteId   String
  athlete     Athlete   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  groupNumber Int // 1, 2, or 3
  hourNumber  Int // 1 or 2
  trainingDay DayOfWeek
  isActive    Boolean   @default(true)

  assignedBy        String
  assignedByTrainer Trainer  @relation("LegacyGroupAssignments", fields: [assignedBy], references: [id])
  assignedAt        DateTime @default(now())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([athleteId])
  @@index([groupNumber])
  @@index([trainingDay, hourNumber, groupNumber])
}

// Training Session - Generated from RecurringTraining or created manually
model TrainingSession {
  id        String    @id @default(cuid())
  date      DateTime
  dayOfWeek DayOfWeek
  startTime String? // e.g., "17:00"
  endTime   String? // e.g., "18:30"

  // Link to recurring template (if generated from one)
  recurringTrainingId String?
  recurringTraining   RecurringTraining? @relation(fields: [recurringTrainingId], references: [id])

  // Session details
  notes              String?
  isCompleted        Boolean   @default(false)
  isCancelled        Boolean   @default(false)
  cancelledBy        String? // Admin who cancelled
  cancelledAt        DateTime?
  cancellationReason String?

  // Relationships
  groups                    SessionGroup[] // Groups within this session
  cancellations             Cancellation[] // Athlete cancellations
  attendanceRecords         AttendanceRecord[]
  sessionAthleteAssignments SessionAthleteAssignment[] // One-time athlete reassignments

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([date, recurringTrainingId])
  @@index([date])
  @@index([dayOfWeek])
  @@index([recurringTrainingId])
}

// Session Group - Instantiation of a TrainingGroup for a specific session
model SessionGroup {
  id                String          @id @default(cuid())
  trainingSessionId String
  trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
  trainingGroupId   String
  trainingGroup     TrainingGroup   @relation(fields: [trainingGroupId], references: [id], onDelete: Restrict)

  // Session-specific data
  exercises String? // Text field for exercises, can reference previous week
  notes     String? // Additional notes for this group in this session

  // Relationships
  trainerAssignments        SessionGroupTrainerAssignment[]
  sessionAthleteAssignments SessionAthleteAssignment[] // For drag-and-drop reassignments

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trainingSessionId, trainingGroupId])
  @@index([trainingSessionId])
  @@index([trainingGroupId])
}

// Session-specific trainer assignment (can override recurring assignment)
model SessionGroupTrainerAssignment {
  id             String       @id @default(cuid())
  sessionGroupId String
  sessionGroup   SessionGroup @relation(fields: [sessionGroupId], references: [id], onDelete: Cascade)
  trainerId      String? // Nullable to allow "no trainer" in rare cases
  trainer        Trainer?     @relation(fields: [trainerId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())

  @@index([sessionGroupId])
  @@index([trainerId])
}

// Session-specific athlete assignment (for drag-and-drop one-time changes)
model SessionAthleteAssignment {
  id                String          @id @default(cuid())
  trainingSessionId String
  trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
  sessionGroupId    String
  sessionGroup      SessionGroup    @relation(fields: [sessionGroupId], references: [id], onDelete: Cascade)
  athleteId         String
  athlete           Athlete         @relation(fields: [athleteId], references: [id], onDelete: Cascade)

  // Audit trail
  movedBy        String
  movedByTrainer Trainer  @relation("SessionAthleteReassignments", fields: [movedBy], references: [id])
  movedAt        DateTime @default(now())
  reason         String? // Optional reason for the move

  createdAt DateTime @default(now())

  @@unique([trainingSessionId, athleteId])
  @@index([trainingSessionId])
  @@index([sessionGroupId])
  @@index([athleteId])
}

// DEPRECATED: Legacy trainer-session assignment - kept for migration compatibility
model TrainerSessionAssignment {
  id        String   @id @default(cuid())
  trainerId String
  sessionId String
  createdAt DateTime @default(now())

  @@unique([trainerId, sessionId])
  @@index([sessionId])
  @@index([trainerId])
}

// Cancellation - MANDATORY REASON
model Cancellation {
  id                String          @id @default(cuid())
  athleteId         String
  athlete           Athlete         @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  trainingSessionId String
  trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
  reason            String // MANDATORY, minimum 10 characters
  cancelledAt       DateTime        @default(now())

  // Optional: can be undone before session
  isActive Boolean   @default(true)
  undoneAt DateTime?

  createdAt DateTime @default(now())

  @@index([athleteId])
  @@index([trainingSessionId])
  @@index([cancelledAt])
}

// Attendance Record - COACH/ADMIN ONLY CAN MODIFY
model AttendanceRecord {
  id                String           @id @default(cuid())
  athleteId         String
  athlete           Athlete          @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  trainingSessionId String
  trainingSession   TrainingSession  @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
  status            AttendanceStatus

  // Audit trail
  markedBy           String
  markedByTrainer    Trainer   @relation(fields: [markedBy], references: [id])
  markedAt           DateTime  @default(now())
  lastModifiedBy     String?
  lastModifiedAt     DateTime?
  modificationReason String?

  notes String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([athleteId, trainingSessionId])
  @@index([athleteId])
  @@index([trainingSessionId])
  @@index([status])
}

// Upload/File - Renamed from TrainingPlan
model Upload {
  id         String         @id @default(cuid())
  categoryId String
  category   UploadCategory @relation(fields: [categoryId], references: [id])
  title      String
  targetDate String? // "April 2026"
  filePath   String // storage path
  fileName   String
  fileSize   Int
  mimeType   String // should always be 'application/pdf'

  // Upload info
  uploadedBy        String
  uploadedByTrainer Trainer  @relation(fields: [uploadedBy], references: [id])
  uploadedAt        DateTime @default(now())
  version           Int      @default(1)

  // Optional: maintain history
  replacedBy String? // id of newer version
  isActive   Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@index([isActive])
}

// Audit Log (for attendance changes)
model AuditLog {
  id              String   @id @default(cuid())
  entityType      String // 'attendance', 'athlete', 'session'
  entityId        String
  action          String // 'create', 'update', 'delete'
  changes         Json // JSON of what changed
  performedBy     String
  performedByUser Trainer  @relation(fields: [performedBy], references: [id])
  performedAt     DateTime @default(now())
  reason          String?

  @@index([entityType, entityId])
  @@index([performedAt])
  @@index([performedBy])
}

// Monthly Trainer Hours Summary - ADMIN ONLY
model MonthlyTrainerSummary {
  id        String  @id @default(cuid())
  month     Int // 1-12
  year      Int
  trainerId String
  trainer   Trainer @relation("TrainerMonthlySummaries", fields: [trainerId], references: [id], onDelete: Cascade)

  // Calculated hours from sessions
  calculatedHours Decimal @default(0) @db.Decimal(10, 2)

  // Admin can manually adjust the hours
  adjustedHours Decimal? @db.Decimal(10, 2)

  // Final hours (adjusted or calculated)
  finalHours Decimal @default(0) @db.Decimal(10, 2)

  // Notes for adjustments
  notes String?

  // Admin who made adjustments
  lastModifiedBy     String?
  lastModifiedByUser Trainer?  @relation("TrainerSummaryModifier", fields: [lastModifiedBy], references: [id])
  lastModifiedAt     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([trainerId, month, year])
  @@index([month, year])
  @@index([trainerId])
}
