// Database schema for Gymnastics Manager V2 - Dual Role Implementation
generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// ============================================================================
// ENUMS
// ============================================================================

enum UserRole {
    ATHLETE
    TRAINER
    ADMIN
}

enum Gender {
    MALE
    FEMALE
    OTHER
}

enum YouthCategory {
    F
    E
    D
}

enum DayOfWeek {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum RecurrenceInterval {
    WEEKLY
    BIWEEKLY
    MONTHLY
}

enum AttendanceStatus {
    PRESENT
    ABSENT_UNEXCUSED
    ABSENT_EXCUSED
}

// ============================================================================
// USER MODELS (NEW UNIFIED STRUCTURE)
// ============================================================================

// Unified User model - Core identity
model User {
    id           String    @id @default(cuid())
    email        String    @unique
    passwordHash String
    firstName    String
    lastName     String
    phone        String
    birthDate    DateTime?
    gender       Gender?

    // Profile flags
    isAthlete Boolean @default(false)
    isTrainer Boolean @default(false)

    // Relationships to profiles
    athleteProfile AthleteProfile?
    trainerProfile TrainerProfile?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([email])
    @@index([isAthlete, isTrainer])
}

// Athlete-specific profile
model AthleteProfile {
    id     String @id @default(cuid())
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // Guardian information (for minors)
    guardianName          String?
    guardianEmail         String?
    guardianPhone         String?
    emergencyContactName  String?
    emergencyContactPhone String?

    // Training configuration (coach-managed)
    youthCategory            YouthCategory @default(F)
    competitionParticipation Boolean       @default(false)
    hasDtbId                 Boolean       @default(false)

    // Account status
    isApproved        Boolean         @default(false)
    approvedBy        String?
    approvedByTrainer TrainerProfile? @relation("AthleteApprovals", fields: [approvedBy], references: [id])
    approvedAt        DateTime?
    configuredAt      DateTime?

    // Preferences
    autoConfirmFutureSessions Boolean @default(false)

    // Relationships
    recurringTrainingAssignments RecurringTrainingAthleteAssignment[]
    sessionAthleteAssignments    SessionAthleteAssignment[]
    cancellations                Cancellation[]
    attendanceRecords            AttendanceRecord[]
    absenceAlerts                AbsenceAlert[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([isApproved])
    @@index([youthCategory])
}

// Trainer-specific profile
model TrainerProfile {
    id       String   @id @default(cuid())
    userId   String   @unique
    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    role     UserRole @default(TRAINER)
    isActive Boolean  @default(true)

    // Relationships
    approvedAthletes              AthleteProfile[]                     @relation("AthleteApprovals")
    createdRecurringTrainings     RecurringTraining[]                  @relation("RecurringTrainingCreator")
    recurringTrainingAssignments  RecurringTrainingTrainerAssignment[] @relation("RecurringTrainingAssignments")
    recurringAthleteAssignments   RecurringTrainingAthleteAssignment[] @relation("AthleteAssignmentCreator")
    trainerAssignmentsCreated     RecurringTrainingTrainerAssignment[] @relation("TrainerAssignmentCreator")
    sessionGroupAssignments       SessionGroupTrainerAssignment[]
    sessionAthleteReassignments   SessionAthleteAssignment[]           @relation("SessionAthleteReassignments")
    uploads                       Upload[]
    attendanceMarked              AttendanceRecord[]
    auditLogs                     AuditLog[]
    monthlyHoursSummaries         MonthlyTrainerSummary[]              @relation("TrainerMonthlySummaries")
    modifiedMonthlyHoursSummaries MonthlyTrainerSummary[]              @relation("TrainerSummaryModifier")
    modifiedSystemSettings        SystemSettings[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([userId])
    @@index([role])
    @@index([isActive])
}

// ============================================================================
// TRAINING STRUCTURE MODELS
// ============================================================================

// Upload Category (admin-managed file categories)
model UploadCategory {
    id          String  @id @default(cuid())
    name        String  @unique
    description String?
    sortOrder   Int     @default(0)
    isActive    Boolean @default(true)

    uploads Upload[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([isActive, sortOrder])
}

// Recurring Training Template (admin-managed)
model RecurringTraining {
    id         String             @id @default(cuid())
    name       String
    dayOfWeek  DayOfWeek
    startTime  String
    endTime    String
    recurrence RecurrenceInterval @default(WEEKLY)
    isActive   Boolean            @default(true)

    // Creator
    createdBy        String
    createdByTrainer TrainerProfile @relation("RecurringTrainingCreator", fields: [createdBy], references: [id])

    // Relationships
    groups           TrainingGroup[]
    trainingSessions TrainingSession[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([dayOfWeek])
    @@index([isActive])
}

// Training Group within a recurring training
model TrainingGroup {
    id                  String            @id @default(cuid())
    recurringTrainingId String
    recurringTraining   RecurringTraining @relation(fields: [recurringTrainingId], references: [id], onDelete: Cascade)
    name                String
    sortOrder           Int               @default(0)

    // Relationships
    athleteAssignments RecurringTrainingAthleteAssignment[]
    trainerAssignments RecurringTrainingTrainerAssignment[]
    sessionGroups      SessionGroup[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([recurringTrainingId, name])
    @@index([recurringTrainingId])
}

// Athlete assignment to training group (recurring)
model RecurringTrainingAthleteAssignment {
    id              String         @id @default(cuid())
    trainingGroupId String
    trainingGroup   TrainingGroup  @relation(fields: [trainingGroupId], references: [id], onDelete: Cascade)
    athleteId       String
    athlete         AthleteProfile @relation(fields: [athleteId], references: [id], onDelete: Cascade)

    // Assignment metadata
    assignedBy        String
    assignedByTrainer TrainerProfile @relation("AthleteAssignmentCreator", fields: [assignedBy], references: [id])
    assignedAt        DateTime       @default(now())

    createdAt DateTime @default(now())

    @@unique([trainingGroupId, athleteId])
    @@index([trainingGroupId])
    @@index([athleteId])
}

// Trainer assignment to training group (recurring)
model RecurringTrainingTrainerAssignment {
    id              String         @id @default(cuid())
    trainingGroupId String
    trainingGroup   TrainingGroup  @relation(fields: [trainingGroupId], references: [id], onDelete: Cascade)
    trainerId       String
    trainer         TrainerProfile @relation("RecurringTrainingAssignments", fields: [trainerId], references: [id], onDelete: Cascade)
    isPrimary       Boolean        @default(true)

    // Optional date range for assignment
    effectiveFrom  DateTime?
    effectiveUntil DateTime?

    // Assignment metadata
    assignedBy        String
    assignedByTrainer TrainerProfile @relation("TrainerAssignmentCreator", fields: [assignedBy], references: [id])
    assignedAt        DateTime       @default(now())

    createdAt DateTime @default(now())

    @@unique([trainingGroupId, trainerId])
    @@index([trainingGroupId])
    @@index([trainerId])
}

// ============================================================================
// SESSION MODELS
// ============================================================================

// Training Session (generated from recurring or manual)
model TrainingSession {
    id        String    @id @default(cuid())
    date      DateTime
    dayOfWeek DayOfWeek
    startTime String?
    endTime   String?

    // Link to recurring template
    recurringTrainingId String?
    recurringTraining   RecurringTraining? @relation(fields: [recurringTrainingId], references: [id])

    // Session status
    notes              String?
    isCompleted        Boolean   @default(false)
    isCancelled        Boolean   @default(false)
    cancelledBy        String?
    cancelledAt        DateTime?
    cancellationReason String?

    // Relationships
    groups                    SessionGroup[]
    cancellations             Cancellation[]
    attendanceRecords         AttendanceRecord[]
    sessionAthleteAssignments SessionAthleteAssignment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([date, recurringTrainingId])
    @@index([date])
    @@index([dayOfWeek])
    @@index([recurringTrainingId])
}

// Session Group (instantiation of training group for specific session)
model SessionGroup {
    id                String          @id @default(cuid())
    trainingSessionId String
    trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
    trainingGroupId   String
    trainingGroup     TrainingGroup   @relation(fields: [trainingGroupId], references: [id], onDelete: Restrict)

    // Session-specific data
    exercises String?
    notes     String?

    // Relationships
    trainerAssignments        SessionGroupTrainerAssignment[]
    sessionAthleteAssignments SessionAthleteAssignment[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([trainingSessionId, trainingGroupId])
    @@index([trainingSessionId])
    @@index([trainingGroupId])
}

// Session-specific trainer assignment
model SessionGroupTrainerAssignment {
    id             String          @id @default(cuid())
    sessionGroupId String
    sessionGroup   SessionGroup    @relation(fields: [sessionGroupId], references: [id], onDelete: Cascade)
    trainerId      String?
    trainer        TrainerProfile? @relation(fields: [trainerId], references: [id], onDelete: SetNull)

    createdAt DateTime @default(now())

    @@index([sessionGroupId])
    @@index([trainerId])
}

// Session-specific athlete assignment (for drag-and-drop reassignments)
model SessionAthleteAssignment {
    id                String          @id @default(cuid())
    trainingSessionId String
    trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
    sessionGroupId    String
    sessionGroup      SessionGroup    @relation(fields: [sessionGroupId], references: [id], onDelete: Cascade)
    athleteId         String
    athlete           AthleteProfile  @relation(fields: [athleteId], references: [id], onDelete: Cascade)

    // Audit trail
    movedBy        String
    movedByTrainer TrainerProfile @relation("SessionAthleteReassignments", fields: [movedBy], references: [id])
    movedAt        DateTime       @default(now())
    reason         String?

    createdAt DateTime @default(now())

    @@unique([trainingSessionId, athleteId])
    @@index([trainingSessionId])
    @@index([sessionGroupId])
    @@index([athleteId])
}

// ============================================================================
// ATTENDANCE MODELS
// ============================================================================

// Athlete cancellation (self-reported absence)
model Cancellation {
    id                String          @id @default(cuid())
    athleteId         String
    athlete           AthleteProfile  @relation(fields: [athleteId], references: [id], onDelete: Cascade)
    trainingSessionId String
    trainingSession   TrainingSession @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
    reason            String
    cancelledAt       DateTime        @default(now())

    // Can be undone
    isActive Boolean   @default(true)
    undoneAt DateTime?

    createdAt DateTime @default(now())

    @@index([athleteId])
    @@index([trainingSessionId])
    @@index([cancelledAt])
}

// Attendance record (trainer-marked)
model AttendanceRecord {
    id                String           @id @default(cuid())
    athleteId         String
    athlete           AthleteProfile   @relation(fields: [athleteId], references: [id], onDelete: Cascade)
    trainingSessionId String
    trainingSession   TrainingSession  @relation(fields: [trainingSessionId], references: [id], onDelete: Cascade)
    status            AttendanceStatus

    // Audit trail
    markedBy           String
    markedByTrainer    TrainerProfile @relation(fields: [markedBy], references: [id])
    markedAt           DateTime       @default(now())
    lastModifiedBy     String?
    lastModifiedAt     DateTime?
    modificationReason String?
    notes              String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([athleteId, trainingSessionId])
    @@index([athleteId])
    @@index([trainingSessionId])
    @@index([status])
}

// ============================================================================
// FILE MANAGEMENT MODELS
// ============================================================================

// Upload/File
model Upload {
    id         String         @id @default(cuid())
    categoryId String
    category   UploadCategory @relation(fields: [categoryId], references: [id])
    title      String
    targetDate String?
    filePath   String
    fileName   String
    fileSize   Int
    mimeType   String

    // Upload metadata
    uploadedBy        String
    uploadedByTrainer TrainerProfile @relation(fields: [uploadedBy], references: [id])
    uploadedAt        DateTime       @default(now())
    version           Int            @default(1)

    // Version control
    replacedBy String?
    isActive   Boolean @default(true)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([categoryId])
    @@index([isActive])
}

// ============================================================================
// ADMINISTRATIVE MODELS
// ============================================================================

// Audit Log
model AuditLog {
    id              String         @id @default(cuid())
    entityType      String
    entityId        String
    action          String
    changes         Json
    performedBy     String
    performedByUser TrainerProfile @relation(fields: [performedBy], references: [id])
    performedAt     DateTime       @default(now())
    reason          String?

    @@index([entityType, entityId])
    @@index([performedAt])
    @@index([performedBy])
}

// Monthly Trainer Hours Summary
model MonthlyTrainerSummary {
    id        String         @id @default(cuid())
    month     Int
    year      Int
    trainerId String
    trainer   TrainerProfile @relation("TrainerMonthlySummaries", fields: [trainerId], references: [id], onDelete: Cascade)

    // Hours calculation
    calculatedHours Decimal  @default(0) @db.Decimal(10, 2)
    adjustedHours   Decimal? @db.Decimal(10, 2)
    finalHours      Decimal  @default(0) @db.Decimal(10, 2)
    notes           String?

    // Modification tracking
    lastModifiedBy     String?
    lastModifiedByUser TrainerProfile? @relation("TrainerSummaryModifier", fields: [lastModifiedBy], references: [id])
    lastModifiedAt     DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@unique([trainerId, month, year])
    @@index([month, year])
    @@index([trainerId])
}

// System-wide settings
model SystemSettings {
    id String @id @default(cuid())

    // Cancellation settings
    cancellationDeadlineHours Int @default(2) // Hours before session that cancellations are allowed
    absenceAlertThreshold     Int @default(3) // Number of unexcused absences to trigger alert
    absenceAlertWindowDays    Int @default(30) // Time window in days to count absences
    absenceAlertCooldownDays  Int @default(14) // Days before sending another alert for same athlete

    // Email settings
    adminNotificationEmail String  @default("admin@svesting.de")
    absenceAlertEnabled    Boolean @default(true)

    // Other settings
    maxUploadSizeMB            Int @default(10)
    sessionGenerationDaysAhead Int @default(90)

    // Modification tracking
    lastModifiedBy        String?
    lastModifiedByTrainer TrainerProfile? @relation(fields: [lastModifiedBy], references: [id])
    lastModifiedAt        DateTime?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Absence alert tracking (to prevent duplicate alerts within cooldown period)
model AbsenceAlert {
    id        String         @id @default(cuid())
    athleteId String
    athlete   AthleteProfile @relation(fields: [athleteId], references: [id], onDelete: Cascade)

    // Alert details
    absenceCount       Int // Number of absences that triggered this alert
    absencePeriodStart DateTime // Start of the period where absences were counted
    absencePeriodEnd   DateTime // End of the period where absences were counted

    // Email tracking
    sentAt             DateTime @default(now())
    emailSentToAthlete Boolean  @default(false)
    emailSentToAdmin   Boolean  @default(false)

    createdAt DateTime @default(now())

    @@index([athleteId])
    @@index([sentAt])
}
